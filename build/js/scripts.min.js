!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.Util=e(t.jQuery)}(this,function(t){"use strict";return function(n){var e="transitionend";function t(t){var e=this,i=!1;return n(this).one(l.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=n(t).css("transition-duration");return parseFloat(e)?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){n(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,i){for(var n in i)if(Object.prototype.hasOwnProperty.call(i,n)){var o=i[n],r=e[n],s=r&&l.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(t.toUpperCase()+': Option "'+n+'" provided type "'+s+'" but expected type "'+o+'".')}var a}};return n.fn.emulateTransitionEnd=t,n.event.special[l.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(n(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},l}(t=t&&t.hasOwnProperty("default")?t.default:t)}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.Button=e(t.jQuery)}(this,function(t){"use strict";function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s,e,a,i,n,o,l,u,h,c,f,d,m,p,g,y;return t=t&&t.hasOwnProperty("default")?t.default:t,e="button",i="."+(a="bs.button"),n=".data-api",o=(s=t).fn[e],l="active",u="btn",c='[data-toggle^="button"]',f='[data-toggle="buttons"]',d="input",m=".active",p=".btn",g={CLICK_DATA_API:"click"+i+n,FOCUS_BLUR_DATA_API:(h="focus")+i+n+" blur"+i+n},y=function(){function i(t){this._element=t}var t,e,n,o=i.prototype;return o.toggle=function(){var t=!0,e=!0,i=s(this._element).closest(f)[0];if(i){var n=this._element.querySelector(d);if(n){if("radio"===n.type)if(n.checked&&this._element.classList.contains(l))t=!1;else{var o=i.querySelector(m);o&&s(o).removeClass(l)}if(t){if(n.hasAttribute("disabled")||i.hasAttribute("disabled")||n.classList.contains("disabled")||i.classList.contains("disabled"))return;n.checked=!this._element.classList.contains(l),s(n).trigger("change")}n.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(l)),t&&s(this._element).toggleClass(l)},o.dispose=function(){s.removeData(this._element,a),this._element=null},i._jQueryInterface=function(e){return this.each(function(){var t=s(this).data(a);t||(t=new i(this),s(this).data(a,t)),"toggle"===e&&t[e]()})},t=i,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(e=null)&&r(t.prototype,e),n&&r(t,n),i}(),s(document).on(g.CLICK_DATA_API,c,function(t){t.preventDefault();var e=t.target;s(e).hasClass(u)||(e=s(e).closest(p)),y._jQueryInterface.call(s(e),"toggle")}).on(g.FOCUS_BLUR_DATA_API,c,function(t){var e=s(t.target).closest(p)[0];s(e).toggleClass(h,/^focus(in)?$/.test(t.type))}),s.fn[e]=y._jQueryInterface,s.fn[e].Constructor=y,s.fn[e].noConflict=function(){return s.fn[e]=o,y._jQueryInterface},y}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],e):t.Carousel=e(t.jQuery,t.Util)}(this,function(t,d){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var m,a,l,u,e,i,h,c,p,f,g,y,v,_,b,E,C,I,T,S,w,O,A,D,x,n,r,j;return t=t&&t.hasOwnProperty("default")?t.default:t,d=d&&d.hasOwnProperty("default")?d.default:d,a="carousel",u="."+(l="bs.carousel"),e=".data-api",i=(m=t).fn[a],h={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},p="next",f="prev",g="left",y="right",v={SLIDE:"slide"+u,SLID:"slid"+u,KEYDOWN:"keydown"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u,TOUCHEND:"touchend"+u,LOAD_DATA_API:"load"+u+e,CLICK_DATA_API:"click"+u+e},_="carousel",b="active",E="slide",C="carousel-item-right",I="carousel-item-left",T="carousel-item-next",S="carousel-item-prev",w=".active",O=".active.carousel-item",A=".carousel-item",D=".carousel-item-next, .carousel-item-prev",x=".carousel-indicators",n="[data-slide], [data-slide-to]",r='[data-ride="carousel"]',j=function(){function r(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=m(t)[0],this._indicatorsElement=this._element.querySelector(x),this._addEventListeners()}var t,e,i,n=r.prototype;return n.next=function(){this._isSliding||this._slide(p)},n.nextWhenVisible=function(){!document.hidden&&m(this._element).is(":visible")&&"hidden"!==m(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(f)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(D)&&(d.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var e=this;this._activeElement=this._element.querySelector(O);var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)m(this._element).one(v.SLID,function(){return e.to(t)});else{if(i===t)return this.pause(),void this.cycle();var n=i<t?p:f;this._slide(n,this._items[t])}},n.dispose=function(){m(this._element).off(u),m.removeData(this._element,l),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=s({},h,t),d.typeCheckConfig(a,t,c),t},n._addEventListeners=function(){var e=this;this._config.keyboard&&m(this._element).on(v.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(m(this._element).on(v.MOUSEENTER,function(t){return e.pause(t)}).on(v.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&m(this._element).on(v.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(A)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var i=t===p,n=t===f,o=this._getItemIndex(e),r=this._items.length-1;if((n&&0===o||i&&o===r)&&!this._config.wrap)return e;var s=(o+(t===f?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},n._triggerSlideEvent=function(t,e){var i=this._getItemIndex(t),n=this._getItemIndex(this._element.querySelector(O)),o=m.Event(v.SLIDE,{relatedTarget:t,direction:e,from:n,to:i});return m(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(w));m(e).removeClass(b);var i=this._indicatorsElement.children[this._getItemIndex(t)];i&&m(i).addClass(b)}},n._slide=function(t,e){var i,n,o,r=this,s=this._element.querySelector(O),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),u=this._getItemIndex(l),h=Boolean(this._interval);if(o=t===p?(i=I,n=T,g):(i=C,n=S,y),l&&m(l).hasClass(b))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var c=m.Event(v.SLID,{relatedTarget:l,direction:o,from:a,to:u});if(m(this._element).hasClass(E)){m(l).addClass(n),d.reflow(l),m(s).addClass(i),m(l).addClass(i);var f=d.getTransitionDurationFromElement(s);m(s).one(d.TRANSITION_END,function(){m(l).removeClass(i+" "+n).addClass(b),m(s).removeClass(b+" "+n+" "+i),r._isSliding=!1,setTimeout(function(){return m(r._element).trigger(c)},0)}).emulateTransitionEnd(f)}else m(s).removeClass(b),m(l).addClass(b),this._isSliding=!1,m(this._element).trigger(c);h&&this.cycle()}},r._jQueryInterface=function(n){return this.each(function(){var t=m(this).data(l),e=s({},h,m(this).data());"object"==typeof n&&(e=s({},e,n));var i="string"==typeof n?n:e.slide;if(t||(t=new r(this,e),m(this).data(l,t)),"number"==typeof n)t.to(n);else if("string"==typeof i){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}else e.interval&&(t.pause(),t.cycle())})},r._dataApiClickHandler=function(t){var e=d.getSelectorFromElement(this);if(e){var i=m(e)[0];if(i&&m(i).hasClass(_)){var n=s({},m(i).data(),m(this).data()),o=this.getAttribute("data-slide-to");o&&(n.interval=!1),r._jQueryInterface.call(m(i),n),o&&m(i).data(l).to(o),t.preventDefault()}}},t=r,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return h}}],(e=null)&&o(t.prototype,e),i&&o(t,i),r}(),m(document).on(v.CLICK_DATA_API,n,j._dataApiClickHandler),m(window).on(v.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(r)),e=0,i=t.length;e<i;e++){var n=m(t[e]);j._jQueryInterface.call(n,n.data())}}),m.fn[a]=j._jQueryInterface,m.fn[a].Constructor=j,m.fn[a].noConflict=function(){return m.fn[a]=i,j._jQueryInterface},j}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],e):t.Collapse=e(t.jQuery,t.Util)}(this,function(t,l){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var u,s,h,e,i,c,f,d,m,p,g,y,v,_,b,E,a;return t=t&&t.hasOwnProperty("default")?t.default:t,l=l&&l.hasOwnProperty("default")?l.default:l,s="collapse",e="."+(h="bs.collapse"),i=(u=t).fn[s],c={toggle:!0,parent:""},f={toggle:"boolean",parent:"(string|element)"},d={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},m="show",p="collapse",g="collapsing",y="collapsed",v="width",_="height",b=".show, .collapsing",E='[data-toggle="collapse"]',a=function(){function a(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=u.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=[].slice.call(document.querySelectorAll(E)),n=0,o=i.length;n<o;n++){var r=i[n],s=l.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t,e,i,n=a.prototype;return n.toggle=function(){u(this._element).hasClass(m)?this.hide():this.show()},n.show=function(){var t,e,i=this;if(!this._isTransitioning&&!u(this._element).hasClass(m)&&(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(b)).filter(function(t){return t.getAttribute("data-parent")===i._config.parent})).length&&(t=null),!(t&&(e=u(t).not(this._selector).data(h))&&e._isTransitioning))){var n=u.Event(d.SHOW);if(u(this._element).trigger(n),!n.isDefaultPrevented()){t&&(a._jQueryInterface.call(u(t).not(this._selector),"hide"),e||u(t).data(h,null));var o=this._getDimension();u(this._element).removeClass(p).addClass(g),this._element.style[o]=0,this._triggerArray.length&&u(this._triggerArray).removeClass(y).attr("aria-expanded",!0),this.setTransitioning(!0);var r="scroll"+(o[0].toUpperCase()+o.slice(1)),s=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){u(i._element).removeClass(g).addClass(p).addClass(m),i._element.style[o]="",i.setTransitioning(!1),u(i._element).trigger(d.SHOWN)}).emulateTransitionEnd(s),this._element.style[o]=this._element[r]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&u(this._element).hasClass(m)){var e=u.Event(d.HIDE);if(u(this._element).trigger(e),!e.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",l.reflow(this._element),u(this._element).addClass(g).removeClass(p).removeClass(m);var n=this._triggerArray.length;if(0<n)for(var o=0;o<n;o++){var r=this._triggerArray[o],s=l.getSelectorFromElement(r);if(null!==s)u([].slice.call(document.querySelectorAll(s))).hasClass(m)||u(r).addClass(y).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[i]="";var a=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){t.setTransitioning(!1),u(t._element).removeClass(g).addClass(p).trigger(d.HIDDEN)}).emulateTransitionEnd(a)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){u.removeData(this._element,h),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=r({},c,t)).toggle=Boolean(t.toggle),l.typeCheckConfig(s,t,f),t},n._getDimension=function(){return u(this._element).hasClass(v)?v:_},n._getParent=function(){var i=this,t=null;l.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',n=[].slice.call(t.querySelectorAll(e));return u(n).each(function(t,e){i._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},n._addAriaAndCollapsedClass=function(t,e){if(t){var i=u(t).hasClass(m);e.length&&u(e).toggleClass(y,!i).attr("aria-expanded",i)}},a._getTargetFromElement=function(t){var e=l.getSelectorFromElement(t);return e?document.querySelector(e):null},a._jQueryInterface=function(n){return this.each(function(){var t=u(this),e=t.data(h),i=r({},c,t.data(),"object"==typeof n&&n?n:{});if(!e&&i.toggle&&/show|hide/.test(n)&&(i.toggle=!1),e||(e=new a(this,i),t.data(h,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},t=a,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return c}}],(e=null)&&o(t.prototype,e),i&&o(t,i),a}(),u(document).on(d.CLICK_DATA_API,E,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var i=u(this),e=l.getSelectorFromElement(this),n=[].slice.call(document.querySelectorAll(e));u(n).each(function(){var t=u(this),e=t.data(h)?"toggle":i.data();a._jQueryInterface.call(t,e)})}),u.fn[s]=a._jQueryInterface,u.fn[s].Constructor=a,u.fn[s].noConflict=function(){return u.fn[s]=i,a._jQueryInterface},a}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],e):t.Dropdown=e(t.jQuery,t.Popper,t.Util)}(this,function(t,r,s){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var h,l,c,f,e,i,d,m,p,g,y,v,_,b,E,C,n,I,T,S,w,O,A,D,x,j,P,z,u;return t=t&&t.hasOwnProperty("default")?t.default:t,r=r&&r.hasOwnProperty("default")?r.default:r,s=s&&s.hasOwnProperty("default")?s.default:s,l="dropdown",f="."+(c="bs.dropdown"),e=".data-api",i=(h=t).fn[l],d=new RegExp("38|40|27"),m={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:"show"+f,SHOWN:"shown"+f,CLICK:"click"+f,CLICK_DATA_API:"click"+f+e,KEYDOWN_DATA_API:"keydown"+f+e,KEYUP_DATA_API:"keyup"+f+e},p="disabled",g="show",y="dropup",v="dropright",_="dropleft",b="dropdown-menu-right",E="position-static",C='[data-toggle="dropdown"]',n=".dropdown form",I=".dropdown-menu",T=".navbar-nav",S=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",w="top-start",O="top-end",A="bottom-start",D="bottom-end",x="right-start",j="left-start",P={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},z={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},u=function(){function u(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t,e,i,n=u.prototype;return n.toggle=function(){if(!this._element.disabled&&!h(this._element).hasClass(p)){var t=u._getParentFromElement(this._element),e=h(this._menu).hasClass(g);if(u._clearMenus(),!e){var i={relatedTarget:this._element},n=h.Event(m.SHOW,i);if(h(t).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar){if(void 0===r)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var o=this._element;"parent"===this._config.reference?o=t:s.isElement(this._config.reference)&&(o=this._config.reference,void 0!==this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&h(t).addClass(E),this._popper=new r(o,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===h(t).closest(T).length&&h(document.body).children().on("mouseover",null,h.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),h(this._menu).toggleClass(g),h(t).toggleClass(g).trigger(h.Event(m.SHOWN,i))}}}},n.dispose=function(){h.removeData(this._element,c),h(this._element).off(f),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},n.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},n._addEventListeners=function(){var e=this;h(this._element).on(m.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},n._getConfig=function(t){return t=a({},this.constructor.Default,h(this._element).data(),t),s.typeCheckConfig(l,t,this.constructor.DefaultType),t},n._getMenuElement=function(){if(!this._menu){var t=u._getParentFromElement(this._element);t&&(this._menu=t.querySelector(I))}return this._menu},n._getPlacement=function(){var t=h(this._element.parentNode),e=A;return t.hasClass(y)?(e=w,h(this._menu).hasClass(b)&&(e=O)):t.hasClass(v)?e=x:t.hasClass(_)?e=j:h(this._menu).hasClass(b)&&(e=D),e},n._detectNavbar=function(){return 0<h(this._element).closest(".navbar").length},n._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var i={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(i.modifiers.applyStyle={enabled:!1}),i},u._jQueryInterface=function(e){return this.each(function(){var t=h(this).data(c);if(t||(t=new u(this,"object"==typeof e?e:null),h(this).data(c,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},u._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(C)),i=0,n=e.length;i<n;i++){var o=u._getParentFromElement(e[i]),r=h(e[i]).data(c),s={relatedTarget:e[i]};if(t&&"click"===t.type&&(s.clickEvent=t),r){var a=r._menu;if(h(o).hasClass(g)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&h.contains(o,t.target))){var l=h.Event(m.HIDE,s);h(o).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&h(document.body).children().off("mouseover",null,h.noop),e[i].setAttribute("aria-expanded","false"),h(a).removeClass(g),h(o).removeClass(g).trigger(h.Event(m.HIDDEN,s)))}}}},u._getParentFromElement=function(t){var e,i=s.getSelectorFromElement(t);return i&&(e=document.querySelector(i)),e||t.parentNode},u._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||h(t.target).closest(I).length)):d.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!h(this).hasClass(p))){var e=u._getParentFromElement(this),i=h(e).hasClass(g);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var n=[].slice.call(e.querySelectorAll(S));if(0!==n.length){var o=n.indexOf(t.target);38===t.which&&0<o&&o--,40===t.which&&o<n.length-1&&o++,o<0&&(o=0),n[o].focus()}}else{if(27===t.which){var r=e.querySelector(C);h(r).trigger("focus")}h(this).trigger("click")}}},t=u,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return P}},{key:"DefaultType",get:function(){return z}}],(e=null)&&o(t.prototype,e),i&&o(t,i),u}(),h(document).on(m.KEYDOWN_DATA_API,C,u._dataApiKeydownHandler).on(m.KEYDOWN_DATA_API,I,u._dataApiKeydownHandler).on(m.CLICK_DATA_API+" "+m.KEYUP_DATA_API,u._clearMenus).on(m.CLICK_DATA_API,C,function(t){t.preventDefault(),t.stopPropagation(),u._jQueryInterface.call(h(this),"toggle")}).on(m.CLICK_DATA_API,n,function(t){t.stopPropagation()}),h.fn[l]=u._jQueryInterface,h.fn[l].Constructor=u,h.fn[l].noConflict=function(){return h.fn[l]=i,u._jQueryInterface},u}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],e):t.Tooltip=e(t.jQuery,t.Popper,t.Util)}(this,function(t,h,c){"use strict";function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var f,a,l,u,e,d,m,p,g,y,v,_,b,E,C,I,T,S,w,O,A,i;return t=t&&t.hasOwnProperty("default")?t.default:t,h=h&&h.hasOwnProperty("default")?h.default:h,c=c&&c.hasOwnProperty("default")?c.default:c,a="tooltip",u="."+(l="bs.tooltip"),e=(f=t).fn[a],d="bs-tooltip",m=new RegExp("(^|\\s)"+d+"\\S+","g"),y={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(g={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(p={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},_="out",b={HIDE:"hide"+u,HIDDEN:"hidden"+u,SHOW:(v="show")+u,SHOWN:"shown"+u,INSERTED:"inserted"+u,CLICK:"click"+u,FOCUSIN:"focusin"+u,FOCUSOUT:"focusout"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u},E="fade",C="show",I=".tooltip-inner",T=".arrow",S="hover",w="focus",O="click",A="manual",i=function(){function n(t,e){if(void 0===h)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t,e,i,o=n.prototype;return o.enable=function(){this._isEnabled=!0},o.disable=function(){this._isEnabled=!1},o.toggleEnabled=function(){this._isEnabled=!this._isEnabled},o.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,i=f(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(f(this.getTipElement()).hasClass(C))return void this._leave(null,this);this._enter(null,this)}},o.dispose=function(){clearTimeout(this._timeout),f.removeData(this.element,this.constructor.DATA_KEY),f(this.element).off(this.constructor.EVENT_KEY),f(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&f(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},o.show=function(){var e=this;if("none"===f(this.element).css("display"))throw new Error("Please use show on visible elements");var t=f.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){f(this.element).trigger(t);var i=f.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!i)return;var n=this.getTipElement(),o=c.getUID(this.constructor.NAME);n.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&f(n).addClass(E);var r="function"==typeof this.config.placement?this.config.placement.call(this,n,this.element):this.config.placement,s=this._getAttachment(r);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:f(document).find(this.config.container);f(n).data(this.constructor.DATA_KEY,this),f.contains(this.element.ownerDocument.documentElement,this.tip)||f(n).appendTo(a),f(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new h(this.element,n,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:T},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),f(n).addClass(C),"ontouchstart"in document.documentElement&&f(document.body).children().on("mouseover",null,f.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,f(e.element).trigger(e.constructor.Event.SHOWN),t===_&&e._leave(null,e)};if(f(this.tip).hasClass(E)){var u=c.getTransitionDurationFromElement(this.tip);f(this.tip).one(c.TRANSITION_END,l).emulateTransitionEnd(u)}else l()}},o.hide=function(t){var e=this,i=this.getTipElement(),n=f.Event(this.constructor.Event.HIDE),o=function(){e._hoverState!==v&&i.parentNode&&i.parentNode.removeChild(i),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),f(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(f(this.element).trigger(n),!n.isDefaultPrevented()){if(f(i).removeClass(C),"ontouchstart"in document.documentElement&&f(document.body).children().off("mouseover",null,f.noop),this._activeTrigger[O]=!1,this._activeTrigger[w]=!1,this._activeTrigger[S]=!1,f(this.tip).hasClass(E)){var r=c.getTransitionDurationFromElement(i);f(i).one(c.TRANSITION_END,o).emulateTransitionEnd(r)}else o();this._hoverState=""}},o.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},o.isWithContent=function(){return Boolean(this.getTitle())},o.addAttachmentClass=function(t){f(this.getTipElement()).addClass(d+"-"+t)},o.getTipElement=function(){return this.tip=this.tip||f(this.config.template)[0],this.tip},o.setContent=function(){var t=this.getTipElement();this.setElementContent(f(t.querySelectorAll(I)),this.getTitle()),f(t).removeClass(E+" "+C)},o.setElementContent=function(t,e){var i=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?i?f(e).parent().is(t)||t.empty().append(e):t.text(f(e).text()):t[i?"html":"text"](e)},o.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},o._getAttachment=function(t){return g[t.toUpperCase()]},o._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)f(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(t){return n.toggle(t)});else if(t!==A){var e=t===S?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,i=t===S?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT;f(n.element).on(e,n.config.selector,function(t){return n._enter(t)}).on(i,n.config.selector,function(t){return n._leave(t)})}f(n.element).closest(".modal").on("hide.bs.modal",function(){return n.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},o._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},o._enter=function(t,e){var i=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?w:S]=!0),f(e.getTipElement()).hasClass(C)||e._hoverState===v?e._hoverState=v:(clearTimeout(e._timeout),e._hoverState=v,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===v&&e.show()},e.config.delay.show):e.show())},o._leave=function(t,e){var i=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?w:S]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=_,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===_&&e.hide()},e.config.delay.hide):e.hide())},o._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},o._getConfig=function(t){return"number"==typeof(t=s({},this.constructor.Default,f(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),c.typeCheckConfig(a,t,this.constructor.DefaultType),t},o._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},o._cleanTipClass=function(){var t=f(this.getTipElement()),e=t.attr("class").match(m);null!==e&&e.length&&t.removeClass(e.join(""))},o._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},o._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(f(t).removeClass(E),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},n._jQueryInterface=function(i){return this.each(function(){var t=f(this).data(l),e="object"==typeof i&&i;if((t||!/dispose|hide/.test(i))&&(t||(t=new n(this,e),f(this).data(l,t)),"string"==typeof i)){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},t=n,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return y}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return l}},{key:"Event",get:function(){return b}},{key:"EVENT_KEY",get:function(){return u}},{key:"DefaultType",get:function(){return p}}],(e=null)&&r(t.prototype,e),i&&r(t,i),n}(),f.fn[a]=i._jQueryInterface,f.fn[a].Constructor=i,f.fn[a].noConflict=function(){return f.fn[a]=e,i._jQueryInterface},i}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./tooltip.js")):"function"==typeof define&&define.amd?define(["jquery","./tooltip.js"],e):t.Popover=e(t.jQuery,t.Tooltip)}(this,function(t,e){"use strict";function l(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function i(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var u,h,c,f,n,d,m,p,g,y,v,_,b,E,o;return t=t&&t.hasOwnProperty("default")?t.default:t,e=e&&e.hasOwnProperty("default")?e.default:e,h="popover",f="."+(c="bs.popover"),n=(u=t).fn[h],d="bs-popover",m=new RegExp("(^|\\s)"+d+"\\S+","g"),p=i({},e.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),g=i({},e.DefaultType,{content:"(string|element|function)"}),y="fade",_=".popover-header",b=".popover-body",E={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:(v="show")+f,SHOWN:"shown"+f,INSERTED:"inserted"+f,CLICK:"click"+f,FOCUSIN:"focusin"+f,FOCUSOUT:"focusout"+f,MOUSEENTER:"mouseenter"+f,MOUSELEAVE:"mouseleave"+f},o=function(t){var e,i;function n(){return t.apply(this,arguments)||this}i=t,(e=n).prototype=Object.create(i.prototype),(e.prototype.constructor=e).__proto__=i;var o,r,s,a=n.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){u(this.getTipElement()).addClass(d+"-"+t)},a.getTipElement=function(){return this.tip=this.tip||u(this.config.template)[0],this.tip},a.setContent=function(){var t=u(this.getTipElement());this.setElementContent(t.find(_),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(b),e),t.removeClass(y+" "+v)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=u(this.getTipElement()),e=t.attr("class").match(m);null!==e&&0<e.length&&t.removeClass(e.join(""))},n._jQueryInterface=function(i){return this.each(function(){var t=u(this).data(c),e="object"==typeof i?i:null;if((t||!/destroy|hide/.test(i))&&(t||(t=new n(this,e),u(this).data(c,t)),"string"==typeof i)){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},o=n,s=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return h}},{key:"DATA_KEY",get:function(){return c}},{key:"Event",get:function(){return E}},{key:"EVENT_KEY",get:function(){return f}},{key:"DefaultType",get:function(){return g}}],(r=null)&&l(o.prototype,r),s&&l(o,s),n}(e),u.fn[h]=o._jQueryInterface,u.fn[h].Constructor=o,u.fn[h].noConflict=function(){return u.fn[h]=n,o._jQueryInterface},o}),window.$clamp=function(o,t){t=t||{};var r,i=window,s={clamp:t.clamp||2,useNativeClamp:void 0===t.useNativeClamp||t.useNativeClamp,splitOnChars:t.splitOnChars||[".","-","–","—"," "],animate:t.animate||!1,truncationChar:t.truncationChar||"…",truncationHTML:t.truncationHTML},e=o.style,n=o.innerHTML,a=void 0!==o.style.webkitLineClamp,l=s.clamp,u=l.indexOf&&(-1<l.indexOf("px")||-1<l.indexOf("em"));function h(t,e){return i.getComputedStyle||(i.getComputedStyle=function(i,t){return this.el=i,this.getPropertyValue=function(t){var e=/(\-([a-z]){1})/g;return"float"==t&&(t="styleFloat"),e.test(t)&&(t=t.replace(e,function(){return arguments[2].toUpperCase()})),i.currentStyle&&i.currentStyle[t]?i.currentStyle[t]:null},this}),i.getComputedStyle(t,null).getPropertyValue(e)}function c(t){var e=t||o.clientHeight,i=f(o);return Math.max(Math.floor(e/i),0)}function f(t){var e=h(t,"line-height");return"normal"==e&&(e=1.2*parseInt(h(t,"font-size"))),parseInt(e)}s.truncationHTML&&((r=document.createElement("span")).innerHTML=s.truncationHTML);var d,m,p,g,y=s.splitOnChars.slice(0),v=y[0];function _(t){return t.lastChild.children&&0<t.lastChild.children.length?_(Array.prototype.slice.call(t.children).pop()):t.lastChild&&t.lastChild.nodeValue&&""!=t.lastChild.nodeValue&&t.lastChild.nodeValue!=s.truncationChar?t.lastChild:(t.lastChild.parentNode.removeChild(t.lastChild),_(o))}function b(t,e){t.nodeValue=e+s.truncationChar}if("auto"==l?l=c():u&&(l=c(parseInt(l))),a&&s.useNativeClamp)e.overflow="hidden",e.textOverflow="ellipsis",e.webkitBoxOrient="vertical",e.display="-webkit-box",e.webkitLineClamp=l,u&&(e.height=s.clamp+"px");else{var E=(g=l,f(o)*g);E<=o.clientHeight&&(p=function t(e,i){if(i){var n=e.nodeValue.replace(s.truncationChar,"");if(d||(v=0<y.length?y.shift():"",d=n.split(v)),1<d.length?(m=d.pop(),b(e,d.join(v))):d=null,r&&(e.nodeValue=e.nodeValue.replace(s.truncationChar,""),o.innerHTML=e.nodeValue+" "+r.innerHTML+s.truncationChar),d){if(o.clientHeight<=i){if(!(0<=y.length&&""!=v))return o.innerHTML;b(e,d.join(v)+v+m),d=null}}else""==v&&(b(e,""),e=_(o),y=s.splitOnChars.slice(0),v=y[0],m=d=null);if(!s.animate)return t(e,i);setTimeout(function(){t(e,i)},!0===s.animate?10:s.animate)}}(_(o),E))}return{original:n,clamped:p}},function(e,i){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(t){return i(e,t)}):"object"==typeof module&&module.exports?module.exports=i(e,require("jquery")):e.jQueryBridget=i(e,e.jQuery)}(window,function(t,e){"use strict";function i(u,o,h){(h=h||e||t.jQuery)&&(o.prototype.option||(o.prototype.option=function(t){h.isPlainObject(t)&&(this.options=h.extend(!0,this.options,t))}),h.fn[u]=function(t){if("string"!=typeof t)return n=t,this.each(function(t,e){var i=h.data(e,u);i?(i.option(n),i._init()):(i=new o(e,n),h.data(e,u,i))}),this;var e,r,s,a,l,n,i=c.call(arguments,1);return s=i,l="$()."+u+'("'+(r=t)+'")',(e=this).each(function(t,e){var i=h.data(e,u);if(i){var n=i[r];if(n&&"_"!=r.charAt(0)){var o=n.apply(i,s);a=void 0===a?o:a}else f(l+" is not a valid method")}else f(u+" not initialized. Cannot call methods, i.e. "+l)}),void 0!==a?a:e},n(h))}function n(t){!t||t&&t.bridget||(t.bridget=i)}var c=Array.prototype.slice,o=t.console,f=void 0===o?function(){}:function(t){o.error(t)};return n(e||t.jQuery),i}),function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}("undefined"!=typeof window?window:this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],o=0;o<i.length;o++){var r=i[o];n&&n[r]&&(this.off(t,r),delete n[r]),r.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t}),function(t,e){"function"==typeof define&&define.amd?define("get-size/get-size",e):"object"==typeof module&&module.exports?module.exports=e():t.getSize=e()}(window,function(){"use strict";function y(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}function v(t){var e=getComputedStyle(t);return e||i("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),e}function _(t){if(function(){if(!I){I=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var e=document.body||document.documentElement;e.appendChild(t);var i=v(t);b=200==Math.round(y(i.width)),_.isBoxSizeOuter=b,e.removeChild(t)}}(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=v(t);if("none"==e.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<C;e++)t[E[e]]=0;return t}();var i={};i.width=t.offsetWidth,i.height=t.offsetHeight;for(var n=i.isBorderBox="border-box"==e.boxSizing,o=0;o<C;o++){var r=E[o],s=e[r],a=parseFloat(s);i[r]=isNaN(a)?0:a}var l=i.paddingLeft+i.paddingRight,u=i.paddingTop+i.paddingBottom,h=i.marginLeft+i.marginRight,c=i.marginTop+i.marginBottom,f=i.borderLeftWidth+i.borderRightWidth,d=i.borderTopWidth+i.borderBottomWidth,m=n&&b,p=y(e.width);!1!==p&&(i.width=p+(m?0:l+f));var g=y(e.height);return!1!==g&&(i.height=g+(m?0:u+d)),i.innerWidth=i.width-(l+f),i.innerHeight=i.height-(u+d),i.outerWidth=i.width+h,i.outerHeight=i.height+c,i}}var b,i="undefined"==typeof console?function(){}:function(t){console.error(t)},E=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],C=E.length,I=!1;return _}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",e):"object"==typeof module&&module.exports?module.exports=e():t.matchesSelector=e()}(window,function(){"use strict";var i=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(t,e){return t[i](e)}}),function(e,i){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(t){return i(e,t)}):"object"==typeof module&&module.exports?module.exports=i(e,require("desandro-matches-selector")):e.fizzyUIUtils=i(e,e.matchesSelector)}(window,function(u,r){var h={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},e=Array.prototype.slice;h.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?e.call(t):[t]},h.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},h.getParent=function(t,e){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,r(t,e))return t},h.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},h.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},h.filterFindElements=function(t,n){t=h.makeArray(t);var o=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!n)return void o.push(t);r(t,n)&&o.push(t);for(var e=t.querySelectorAll(n),i=0;i<e.length;i++)o.push(e[i])}}),o},h.debounceMethod=function(t,e,n){n=n||100;var o=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];clearTimeout(t);var e=arguments,i=this;this[r]=setTimeout(function(){o.apply(i,e),delete i[r]},n)}},h.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},h.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var c=u.console;return h.htmlInit=function(a,l){h.docReady(function(){var t=h.toDashed(l),o="data-"+t,e=document.querySelectorAll("["+o+"]"),i=document.querySelectorAll(".js-"+t),n=h.makeArray(e).concat(h.makeArray(i)),r=o+"-options",s=u.jQuery;n.forEach(function(e){var t,i=e.getAttribute(o)||e.getAttribute(r);try{t=i&&JSON.parse(i)}catch(t){return void(c&&c.error("Error parsing "+o+" on "+e.className+": "+t))}var n=new a(e,t);s&&s.data(e,l,n)})})},h}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("ev-emitter"),require("get-size")):(t.Outlayer={},t.Outlayer.Item=e(t.EvEmitter,t.getSize))}(window,function(t,e){"use strict";function i(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var n=document.documentElement.style,o="string"==typeof n.transition?"transition":"WebkitTransition",r="string"==typeof n.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[o],a={transform:r,transition:o,transitionDuration:o+"Duration",transitionProperty:o+"Property",transitionDelay:o+"Delay"},l=i.prototype=Object.create(t.prototype);l.constructor=i,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.getSize=function(){this.size=e(this.element)},l.css=function(t){var e=this.element.style;for(var i in t){e[a[i]||i]=t[i]}},l.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],o=t[i?"top":"bottom"],r=parseFloat(n),s=parseFloat(o),a=this.layout.size;-1!=n.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=e?a.paddingLeft:a.paddingRight,s-=i?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",r=i?"left":"right",s=i?"right":"left",a=this.position.x+t[o];e[r]=this.getXValue(a),e[s]="";var l=n?"paddingTop":"paddingBottom",u=n?"top":"bottom",h=n?"bottom":"top",c=this.position.y+t[l];e[u]=this.getYValue(c),e[h]="",this.css(e),this.emitEvent("layout",[this])},l.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},l.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},l._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var r=t-i,s=e-n,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},l.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},l._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},l.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);this.element.offsetHeight;null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var u="opacity,"+r.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()});l.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:u,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},l.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},l.onotransitionend=function(t){this.ontransitionend(t)};var h={"-webkit-transform":"transform"};l.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=h[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd)e.onEnd[i].call(this),delete e.onEnd[i];this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},l._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(c)},l.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){return o&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),void this.hide()):void this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},l.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},i}),function(o,r){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(t,e,i,n){return r(o,t,e,i,n)}):"object"==typeof module&&module.exports?module.exports=r(o,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):o.Outlayer=r(o,o.EvEmitter,o.getSize,o.fizzyUIUtils,o.Outlayer.Item)}(window,function(t,e,o,r,n){"use strict";function s(t,e){var i=r.getQueryElement(t);if(i){this.element=i,u&&(this.$element=u(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var n=++h;this.element.outlayerGUID=n,(c[n]=this)._create(),this._getOption("initLayout")&&this.layout()}else l&&l.error("Bad element for "+this.constructor.namespace+": "+(i||t))}function a(t){function e(){t.apply(this,arguments)}return(e.prototype=Object.create(t.prototype)).constructor=e}var l=t.console,u=t.jQuery,i=function(){},h=0,c={};s.namespace="outlayer",s.Item=n,s.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var f=s.prototype;r.extend(f,e.prototype),f.option=function(t){r.extend(this.options,t)},f._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},s.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},f._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},f.reloadItems=function(){this.items=this._itemize(this.element.children)},f._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],o=0;o<e.length;o++){var r=new i(e[o],this);n.push(r)}return n},f._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},f.getItemElements=function(){return this.items.map(function(t){return t.element})},f.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},f._init=f.layout,f._resetLayout=function(){this.getSize()},f.getSize=function(){this.size=o(this.element)},f._getMeasurement=function(t,e){var i,n=this.options[t];this[t]=n?("string"==typeof n?i=this.element.querySelector(n):n instanceof HTMLElement&&(i=n),i?o(i)[e]:n):0},f.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},f._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},f._layoutItems=function(t,i){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach(function(t){var e=this._getItemLayoutPosition(t);e.item=t,e.isInstant=i||t.isLayoutInstant,n.push(e)},this),this._processLayoutQueue(n)}},f._getItemLayoutPosition=function(){return{x:0,y:0}},f._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},f.updateStagger=function(){var t=this.options.stagger;return null==t?void(this.stagger=0):(this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];return i.length?(i=parseFloat(i))*(d[n]||1):0}(t),this.stagger)},f._positionItem=function(t,e,i,n,o){n?t.goTo(e,i):(t.stagger(o*this.stagger),t.moveTo(e,i))},f._postLayout=function(){this.resizeContainer()},f.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},f._getContainerSize=i,f._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},f._emitCompleteOnItems=function(e,t){function i(){o.dispatchEvent(e+"Complete",null,[t])}function n(){++s==r&&i()}var o=this,r=t.length;if(t&&r){var s=0;t.forEach(function(t){t.once(e,n)})}else i()},f.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),u)if(this.$element=this.$element||u(this.element),e){var o=u.Event(e);o.type=t,this.$element.trigger(o,i)}else this.$element.trigger(t,i)},f.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},f.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},f.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},f.unstamp=function(t){(t=this._find(t))&&t.forEach(function(t){r.removeFrom(this.stamps,t),this.unignore(t)},this)},f._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),r.makeArray(t)},f._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},f._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},f._manageStamp=i,f._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,n=o(t);return{left:e.left-i.left-n.marginLeft,top:e.top-i.top-n.marginTop,right:i.right-e.right-n.marginRight,bottom:i.bottom-e.bottom-n.marginBottom}},f.handleEvent=r.handleEvent,f.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},f.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},f.onresize=function(){this.resize()},r.debounceMethod(s,"onresize",100),f.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},f.needsResizeLayout=function(){var t=o(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},f.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},f.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},f.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},f.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var i=this.updateStagger();t.forEach(function(t,e){t.stagger(e*i),t.reveal()})}},f.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var i=this.updateStagger();t.forEach(function(t,e){t.stagger(e*i),t.hide()})}},f.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},f.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},f.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},f.getItems=function(t){t=r.makeArray(t);var i=[];return t.forEach(function(t){var e=this.getItem(t);e&&i.push(e)},this),i},f.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),r.removeFrom(this.items,t)},this)},f.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete c[e],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){var e=(t=r.getQueryElement(t))&&t.outlayerGUID;return e&&c[e]},s.create=function(t,e){var i=a(s);return i.defaults=r.extend({},s.defaults),r.extend(i.defaults,e),i.compatOptions=r.extend({},s.compatOptions),i.namespace=t,i.data=s.data,i.Item=a(n),r.htmlInit(i,t),u&&u.bridget&&u.bridget(t,i),i};var d={ms:1,s:1e3};return s.Item=n,s}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/item",["outlayer/outlayer"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}var i=e.prototype=Object.create(t.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var i in t){var n=e[i];this.sortData[i]=n(this.element,this)}}};var o=i.destroy;return i.destroy=function(){o.apply(this,arguments),this.css({display:""})},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof module&&module.exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(e,i){"use strict";function n(t){(this.isotope=t)&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}var o=n.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach(function(t){o[t]=function(){return i.prototype[t].apply(this.isotope,arguments)}}),o.needsVerticalResizeLayout=function(){var t=e(this.isotope.element);return this.isotope.size&&t&&t.innerHeight!=this.isotope.size.innerHeight},o._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},o.getColumnWidth=function(){this.getSegmentSize("column","Width")},o.getRowHeight=function(){this.getSegmentSize("row","Height")},o.getSegmentSize=function(t,e){var i=t+e,n="outer"+e;if(this._getMeasurement(i,n),!this[i]){var o=this.getFirstItemSize();this[i]=o&&o[n]||this.isotope.size["inner"+e]}},o.getFirstItemSize=function(){var t=this.isotope.filteredItems[0];return t&&t.element&&e(t.element)},o.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},o.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return(i.prototype=Object.create(o)).constructor=i,e&&(i.options=e),n.modes[i.prototype.namespace=t]=i},n}),function(t,e){"function"==typeof define&&define.amd?define("masonry-layout/masonry",["outlayer/outlayer","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer"),require("get-size")):t.Masonry=e(t.Outlayer,t.getSize)}(window,function(t,u){var e=t.create("masonry");e.compatOptions.fitWidth="isFitWidth";var i=e.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],e=t&&t.element;this.columnWidth=e&&u(e).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,n=this.containerWidth+this.gutter,o=n/i,r=i-n%i;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},i.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,e=u(t);this.containerWidth=e&&e.innerWidth},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),o={x:this.columnWidth*n.col,y:n.y},r=n.y+t.size.outerHeight,s=i+n.col,a=n.col;a<s;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},i._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},i._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},i._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=1<t&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},i._manageStamp=function(t){var e=u(t),i=this._getElementOffset(t),n=this._getOption("originLeft")?i.left:i.right,o=n+e.outerWidth,r=Math.floor(n/this.columnWidth);r=Math.max(0,r);var s=Math.floor(o/this.columnWidth);s-=o%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var a=(this._getOption("originTop")?i.top:i.bottom)+e.outerHeight,l=r;l<=s;l++)this.colYs[l]=Math.max(a,this.colYs[l])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},i._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/masonry",["../layout-mode","masonry-layout/masonry"],e):"object"==typeof module&&module.exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";var i=t.create("masonry"),n=i.prototype,o={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var r in e.prototype)o[r]||(n[r]=e.prototype[r]);var s=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var a=n._getOption;return n._getOption=function(t){return"fitWidth"==t?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows"),i=e.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,n},i._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof module&&module.exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0}),i=e.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=t.size.outerHeight,{x:e,y:i}},i._getContainerSize=function(){return{height:this.y}},e}),function(s,a){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","desandro-matches-selector/matches-selector","fizzy-ui-utils/utils","isotope-layout/js/item","isotope-layout/js/layout-mode","isotope-layout/js/layout-modes/masonry","isotope-layout/js/layout-modes/fit-rows","isotope-layout/js/layout-modes/vertical"],function(t,e,i,n,o,r){return a(s,t,e,i,n,o,r)}):"object"==typeof module&&module.exports?module.exports=a(s,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("isotope-layout/js/item"),require("isotope-layout/js/layout-mode"),require("isotope-layout/js/layout-modes/masonry"),require("isotope-layout/js/layout-modes/fit-rows"),require("isotope-layout/js/layout-modes/vertical")):s.Isotope=a(s,s.Outlayer,s.getSize,s.matchesSelector,s.fizzyUIUtils,s.Isotope.Item,s.Isotope.LayoutMode)}(window,function(t,i,e,n,r,o,s){var a=t.jQuery,u=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},h=i.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=o,h.LayoutMode=s;var l=h.prototype;l._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),i.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],s.modes)this._initLayoutMode(t)},l.reloadItems=function(){this.itemGUID=0,i.prototype.reloadItems.call(this)},l._itemize=function(){for(var t=i.prototype._itemize.apply(this,arguments),e=0;e<t.length;e++){t[e].id=this.itemGUID++}return this._updateItemsSortData(t),t},l._initLayoutMode=function(t){var e=s.modes[t],i=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,i):i,this.modes[t]=new e(this)},l.layout=function(){return!this._isLayoutInited&&this._getOption("initLayout")?void this.arrange():void this._layout()},l._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},l.arrange=function(t){this.option(t),this._getIsInstant();var e=this._filter(this.items);this.filteredItems=e.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[e]):this._hideReveal(e),this._sort(),this._layout()},l._init=l.arrange,l._hideReveal=function(t){this.reveal(t.needReveal),this.hide(t.needHide)},l._getIsInstant=function(){var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;return this._isInstant=e},l._bindArrangeComplete=function(){function t(){e&&i&&n&&o.dispatchEvent("arrangeComplete",null,[o.filteredItems])}var e,i,n,o=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){i=!0,t()}),this.once("revealComplete",function(){n=!0,t()})},l._filter=function(t){var e=this.options.filter;e=e||"*";for(var i=[],n=[],o=[],r=this._getFilterTest(e),s=0;s<t.length;s++){var a=t[s];if(!a.isIgnored){var l=r(a);l&&i.push(a),l&&a.isHidden?n.push(a):l||a.isHidden||o.push(a)}}return{matches:i,needReveal:n,needHide:o}},l._getFilterTest=function(e){return a&&this.options.isJQueryFiltering?function(t){return a(t.element).is(e)}:"function"==typeof e?function(t){return e(t.element)}:function(t){return n(t.element,e)}},l.updateSortData=function(t){var e;e=t?(t=r.makeArray(t),this.getItems(t)):this.items,this._getSorters(),this._updateItemsSortData(e)},l._getSorters=function(){var t=this.options.getSortData;for(var e in t){var i=t[e];this._sorters[e]=c(i)}},l._updateItemsSortData=function(t){for(var e=t&&t.length,i=0;e&&i<e;i++){t[i].updateSortData()}};var c=function(t){if("string"!=typeof t)return t;var e,i,n=u(t).split(" "),o=n[0],r=o.match(/^\[(.+)\]$/),s=r&&r[1],a=(i=o,(e=s)?function(t){return t.getAttribute(e)}:function(t){var e=t.querySelector(i);return e&&e.textContent}),l=h.sortDataParsers[n[1]];return l?function(t){return t&&l(a(t))}:function(t){return t&&a(t)}};h.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},l._sort=function(){if(this.options.sortBy){var t=r.makeArray(this.options.sortBy);this._getIsSameSortBy(t)||(this.sortHistory=t.concat(this.sortHistory));var e=(s=this.sortHistory,a=this.options.sortAscending,function(t,e){for(var i=0;i<s.length;i++){var n=s[i],o=t.sortData[n],r=e.sortData[n];if(r<o||o<r)return(r<o?1:-1)*((void 0!==a[n]?a[n]:a)?1:-1)}return 0});this.filteredItems.sort(e)}var s,a},l._getIsSameSortBy=function(t){for(var e=0;e<t.length;e++)if(t[e]!=this.sortHistory[e])return!1;return!0},l._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},l._resetLayout=function(){i.prototype._resetLayout.call(this),this._mode()._resetLayout()},l._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},l._manageStamp=function(t){this._mode()._manageStamp(t)},l._getContainerSize=function(){return this._mode()._getContainerSize()},l.needsResizeLayout=function(){return this._mode().needsResizeLayout()},l.appended=function(t){var e=this.addItems(t);if(e.length){var i=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(i)}},l.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=e.concat(this.items)}},l._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},l.insert=function(t){var e=this.addItems(t);if(e.length){var i,n,o=e.length;for(i=0;i<o;i++)n=e[i],this.element.appendChild(n.element);var r=this._filter(e).matches;for(i=0;i<o;i++)e[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<o;i++)delete e[i].isLayoutInstant;this.reveal(r)}};var f=l.remove;return l.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);f.call(this,t);for(var i=e&&e.length,n=0;i&&n<i;n++){var o=e[n];r.removeFrom(this.filteredItems,o)}},l.shuffle=function(){for(var t=0;t<this.items.length;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},l._noTransition=function(t,e){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.apply(this,e);return this.options.transitionDuration=i,n},l.getFilteredItemElements=function(){return this.filteredItems.map(function(t){return t.element})},h}),$(document).ready(function(){});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
